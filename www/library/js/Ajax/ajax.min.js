"use strict";
/**
 * Класс XMLHttpRequest-запроса
 *
 * @class
 * @classdesc Выполняет XMLHttpRequest-запрос и возвращает в функциях обратного вызова результат. Принимает в параметрах все необъодимые данные для осуществления XMLHttpRequest-запроса.
 *
 * @param {object} a - Объект параметров запроса XMLHttpRequest
 * @param {string} a.url - Адрес запроса
 * @param {string} [a.data = null] - Данные, отправляемые на сервер. Могут быть переданы только как URI-строка или javascript-объекта
 * @param {string} [a.method = get] - Метод отправки запроса
 * @param {boolean} [a.async = true] - Тип запроса: асинхронный ("true"), синхронный ("false")
 * @param {requestCallback} [a.error = null] - Функция, которая будет вызвана в случае неудачного завершения запроса к серверу
 * @param {requestCallback} [a.success = null] - Функция, которая будет вызвана в случае удачного завершения запроса к серверу
 *
 * @author Ildar Ibragimov <iibragimov84@gmail.com>
 * @copyright Ildar Ibragimov 2016
 */
function ajax(a){function e(a){var b="",d;for(d in a)a.hasOwnProperty(d)&&(b+=d+"="+encodeURIComponent(a[d])+"&");return b.substring(0,b.length-1)}a.data=a.data||null;a.method=a.method||"get";a.async=a.async||"true";a.error=a.error||null;a.success=a.success||null;var c=null;if(a.data)switch("object"===typeof a.data&&(a.data=e(a.data)),a.method){case "get":a.url=a.url+"?"+a.data;break;case "post":c=a.data}var b=window.XMLHttpRequest?new XMLHttpRequest:new ActiveXObject("Microsoft.XMLHTTP");b.onreadystatechange=function(){if(4===b.readyState){200===b.status?a.success&&a.success(b.responseText):a.error&&a.error(b.status+": "+b.statusText)}};b.open(a.method,a.url,a.async);"post"===a.method&&b.setRequestHeader("Content-Type","application/x-www-form-urlencoded");b.send(c)};