/* ==== Решение "preventDefault.js"========================== *
 * ==== Отмена действия по умолчанию браузера на событие ==== *
 * ========================================================== */
function preventDefault(event) { event = event || window.event; event.preventDefault ? event.preventDefault() : event.returnValue = false; }
/* ========================================================== */


/* ==== Решение "getResultMsg.js"==================== *
 * ==== Формирование объекта системных сообщений ==== *
 * ================================================== */
function getResultMsg(type, logMsgs) { return { type: type, report: logMsgs }; }
/* ================================================== */


/* ==== Решение "formsFieldsValidate.js" ============================= *
 * ==== Проверка значений поля формы на допустимость и валидность ==== *
 * =================================================================== */

/**
 * Функция Проверяет значения поля формы на допустимость и валидность
 *
 * Возвращаемое значение:
 * * result (тип: object) - Объект системных сообщений о результатах проверки
 */
function checkFormData(form) {
    // Объявление переменных:
    var elements = form.elements, // Коллекция объектов элементов формы
        logMsgs = []; // Массив сообщений об ошибках

    // Обход коллеции объектов в массиве
    for (var e = 0; e < elements.length; e++) {
        // Объявление переменных:
        var tagName = elements[e].tagName.toLowerCase(), // Название тега элемента формы
            name = elements[e].name, // Значение атрибута "name" элемента формы
            type = elements[e].type, // Значение атрибута "type" элемента формы
            value = elements[e].value; // Содержимое элемента формы

        // Если тип элемента формы - button/input или captcha
        if ( type == 'submit' || ~name.toLowerCase().indexOf('captcha') ) {
            // Прерывание выполнения текущей итерации и переход к следующей итерации
            continue;
        }
        // Если содержимое элемента формы пустое
        if ( value == '' ) {
            // Формирование сообщения об ошибке
            logMsgs[e] = 'Поле не должно быть пустым!';
            // Прерывание выполнения текущей итерации и переход к следующей итерации
            continue;
        }
        // Проверка (по значнию атрибута "name") содержимого элемента формы на соответствие присвоенному типу поля
        switch ( name ) {
            case 'name':
                // Формирование регулярного выражения (любые символы кроме руссих букв и пробела) для поиска совпадений
                var regExp = /(^[а-яА-ЯёЁ\s]*$)/i;
                // Если совпадения найдены
                if ( regExp.exec(value) == null) {
                    // Формирование сообщения об ошибке
                    logMsgs[e] = 'Имя должно состоять только из букв русского алфавита!';
                }
                // Прерывание выполнения конструкции "switch"
                break;
            case 'email':
                // Формирование регулярного выражения (любые символы кроме руссих букв и пробела) для поиска совпадений
                var regExp = /(^([a-z0-9]+[-._]{0,1})+@([a-z0-9]+[-._]{0,1})+\.+[A-z]{2,8}$)/i;
                // Если совпадения найдены
                if ( regExp.exec(value) == null) {
                    // Формирование сообщения об ошибке
                    logMsgs[e] = 'E-mail указан не верно!';
                }
                // Прерывание выполнения конструкции "switch"
                break;
            case 'phone':
                // Формирование регулярного выражения (любые символы кроме руссих букв и пробела) для поиска совпадений
                var regExp = /(\+7[\s{1}]?[\({1}]?\d{3,6}[\){1}]?[\s{1}]?\d{1,3}[\s\-{1}]?\d{2}[\s\-{1}]?\d{2}\b)/;
                // Если совпадения найдены
                if ( regExp.exec(value) == null) {
                    // Формирование сообщения об ошибке
                    logMsgs[e] = 'Номер телефона указан не верно!';
                }
                // Прерывание выполнения конструкции "switch"
                break;
            case 'message':
                // Формирование регулярного выражения (любые символы кроме руссих букв и пробела) для поиска совпадений
                var regExp = /([\<\>]|script|style)/i;
                // Если совпадения найдены
                if ( regExp.exec(value) !== null) {
                    // Формирование сообщения об ошибке
                    logMsgs[e] = 'Вводите только текст! HTML-теги недопустимы!';
                }
                // Прерывание выполнения конструкции "switch"
                break;
            default:
                // Прерывание выполнения конструкции "switch"
                break;
        }
    }
    // Если массив сообщений об ошибках не пустой
    var result = ( logMsgs.length > 0)
        ? getResultMsg('fail', logMsgs)
        : getResultMsg('success', ['Проверка данных прошла успешно!']);
    // Возвращение результата проверки
    return result;
}

/* ================================================== */